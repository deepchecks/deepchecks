# ----------------------------------------------------------------------------
# Copyright (C) 2021-2023 Deepchecks (https://www.deepchecks.com)
#
# This file is part of Deepchecks.
# Deepchecks is distributed under the terms of the GNU Affero General
# Public License (version 3 or later).
# You should have received a copy of the GNU Affero General Public License
# along with Deepchecks.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------------
#
name: Build

on:
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main, nlp-base]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  DISABLE_DEEPCHECKS_ANONYMOUS_TELEMETRY: "true"
  FAIL_ON_DEEPCHECKS_DEPRECATION_WARNINGS: "true"

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"] #TODO: add 3.10 when upgrading torch to 1.11

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set Up Env
      run: make env
    - name: pip freeze
      run: make freeze
#    - name: Debugging with ssh
#      uses: lhotari/action-upterm@v1
#      with:
#        ## limits ssh access and adds the ssh public key for the user which triggered the workflow
#        limit-access-to-actor: true
    - name: Run Tests
      run: make test

  coverage:
    runs-on: ubuntu-latest
    name: coveralls
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Set Up Env
      run: make env
    - name: Run Coverage
      run: make coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tests-tabular-python36:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.6
        uses: actions/setup-python@v3
        with:
          python-version: 3.6
      - name: Set Up Env
        run: make env
      - name: Run Tests
        run: make test-tabular-only


  tests-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9 #TODO: add 3.10 when scikit-learn have a wheel https://github.com/scikit-learn/scikit-learn/pull/21232
    - name: Run Tests
      run: make test-win

  scikit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scikit-version: [ '0.23.2', '1.0.2', '1.1.0' ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"
      - name: Setup env and dev requirements
        run: make env requirements dev-requirements && pip install scikit-learn==${{ matrix.scikit-version }}
      - name: Run suite test
        run: make test args=tests/tabular/suites

  dependencies-license-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.7'
    - name: Get explicit and transitive dependencies
      run: |
        pip3 install torch==1.10.2+cpu torchvision==0.11.3+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html
        pip install -r requirements/requirements.txt
        pip install -r requirements/vision-requirements.txt
        pip install -r requirements/nlp-requirements.txt
        pip freeze > requirements-all.txt
    - name: Check python
      id: license_check_report
      uses: pilosus/action-pip-license-checker@v0.6.1
      with:
        requirements: 'requirements-all.txt'
        fail: 'Copyleft,Other,Error'
        exclude: '(pyzmq.*24\.0\.1|debugpy.*1\.6\.7\.post1|certifi.*2024\.2\.2|tqdm.*4\.66\.2|webencodings.*0\.5\.1|torch.*1\.10\.2.*|torchvision.*0\.11\.3.*|terminado.*0\.15\.0.*|urllib3.*1\.26\.11.*|imageio.*2\.20\.0.*|jsonschema.*4\.8\.0.*|qudida.*0\.0\.4*|tbb.*2021\.10\.0)'
        # pyzmq is Revised BSD https://github.com/zeromq/pyzmq/blob/main/examples/LICENSE
        # debugpy is MIT https://github.com/microsoft/debugpy/blob/main/LICENSE
        # certifi is MPL-2.0 https://github.com/certifi/python-certifi/blob/master/LICENSE
        # tqdm is MPL-2.0 https://github.com/tqdm/tqdm/blob/master/LICENCE
        # webencodings is BSD https://github.com/gsnedders/python-webencodings/blob/master/LICENSE
        # torch is BSD https://github.com/pytorch/pytorch/blob/master/LICENSE
        # torchvision is BSD https://github.com/pytorch/vision/blob/main/LICENSE
        # terminado is BSD https://github.com/jupyter/terminado/blob/main/LICENSE
        # urllib3 is MIT https://github.com/urllib3/urllib3/blob/main/LICENSE.txt
        # imagio is BSD 2 https://github.com/imageio/imageio/blob/master/LICENSE
        # jsonschema is MIT license https://github.com/python-jsonschema/jsonschema/blob/main/COPYING
        # debugpy is MIT license https://github.com/microsoft/debugpy/blob/main/LICENSE
        # qudida is MIT license https://github.com/arsenyinfo/qudida/blob/main/LICENSE
        # tbb is Apache License 2.0 https://github.com/oneapi-src/oneTBB/blob/master/LICENSE
    - name: Print report
      if: ${{ always() }}
      run: echo "${{ steps.license_check_report.outputs.report }}"

#  gpu-tests:
#    runs-on: [self-hosted, gpu]
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python
#        uses: actions/setup-python@v3
#        with:
#          python-version: '3.7'
#      - name: Set Up Env
#        run: make env
#      - name: Run Tests
#        run: make vision-gpu-tests


#  documentation-check:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v1
#        with:
#          node-version: '14.x'
#      - name: Test Build
#        run: |
#          make website
#          cd docs/_website
#          if [ -e package-lock.json ]; then
#            npm ci
#          else
#            npm i
#          fi
#          npm run build
